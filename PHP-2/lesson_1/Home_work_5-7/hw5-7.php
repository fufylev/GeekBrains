<?php

/* 5. Дан код:
Что он выведет на каждом шаге? Почему?*/

class A
{
    public function foo()
    {
        static $x = 0;
        echo ++$x;
    }
}

/*
Динамические методы в PHP «не размножаются». Создаются экземпляры класса но метод остаётся в классе.
Даже если будет несколько объектов этого класса, метод будет существовать лишь в одном экземпляре,
просто при каждом вызове в него будет пробрасываться разный $this.
Ключевое слово static, написанное перед присваиванием значения локальной переменной, приводит к следующим эффектам:
присваивание выполняется только один раз, при первом вызове функции;
значение помеченной таким образом переменной сохраняется после окончания работы функции;
при последующих вызовах функции вместо присваивания переменная получает сохраненное ранее значение
Соответственно при каждом вызове foo() $x увеличивается на 1 в строке "++$x" и учитывая префиксный инкрементполучаем
1-2-3-4 как результат выполнения кода
*/
$a1 = new A();
$a2 = new A();
$a1->foo(); // 1
$a2->foo(); // 2
$a1->foo(); // 3
$a2->foo(); // 4

echo "<br><hr>";

/* 6. Немного изменим п.5:
 Объясните результаты в этом случае.*/

/* Однако, наследование класса (и метода) приводит к тому, что всё-таки создается новый метод,
поэтому вызоваются разные методы foo() в классе B и C и если метод родителя не переписан значения
при вызове метода в разных экземплярах соответственно будут одинаковыми
Учитывая префиксный инкремент получаем результат выполнения кода как 1-1-2-2*/

class B
{
    public function foo()
    {
        static $x = 0;
        echo ++$x;
    }
}

class C extends B
{
}

$a1 = new B();
$b1 = new C();
$a1->foo(); // 1
$b1->foo(); // 1
$a1->foo(); // 2
$b1->foo(); // 2

echo "<br><hr>";


/* 7. *Дан код:
Что он выведет на каждом шаге? Почему? */

/* Не знаю правильно ли я понял в чем разница между заданием 6 и 7, но как я понимаю назначение
скобок после названия класса при создании экземпляра - это ввести любые аргументы, которые может принять наш конструктор
класса, но так как у нас конструктора нет, то и отстутствие скобок не приводит к ошибке и код выполняется точно также
как и в задании №6. Учитывая префиксный инкремент получаем результат выполнения кода как 1-1-2-2 */

class D
{
    public function foo()
    {
        static $x = 0;
        echo ++$x;
    }
}

class E extends D
{
}

$a1 = new D;
$b1 = new E;
$a1->foo(); // 1
$b1->foo(); // 1
$a1->foo(); // 2
$b1->foo(); // 2